package org.duder.activities;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;

import org.duder.model.ChatMessage;
import org.duder.util.Const;
import org.duder.util.StompUtils;
import org.duder.util.messages.ChatMessageRecyclerViewAdapter;
import org.duder.websocket.WebsocketConnector;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import app.xlui.example.im.R;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.schedulers.Schedulers;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import ua.naiksoftware.stomp.StompClient;
import ua.naiksoftware.stomp.dto.StompCommand;
import ua.naiksoftware.stomp.dto.StompHeader;
import ua.naiksoftware.stomp.dto.StompMessage;

public class ChatActivity extends AppCompatActivity {

    private String username;

    // region View Controls
    private TextView     tvChatTitle;
    private RecyclerView rvChatMessages;
    private EditText     etChatMessage;
    private Button       btnChatSend;
    // endregion

    private ChatMessageRecyclerViewAdapter msgAdapter;
    private StompClient                    stompClient;
    private OkHttpClient                   okHttpClient = new OkHttpClient();
    private Gson                           gson         = new GsonBuilder().create();
    private CompositeDisposable            compositeDisposable;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);
        initialize(this.getIntent().getExtras());

        stompClient = WebsocketConnector.getWebsocketConnection(this);
        resetSubscriptions();
        printChatMessagesHistory();
        subscribeToWebsocket();

        btnChatSend.setOnClickListener(v -> sendMessage());
    }

    private void initialize(Bundle bundle) {
        username = (String) bundle.get("username");
        tvChatTitle = findViewById(R.id.tvChatTitle);
        rvChatMessages = findViewById(R.id.rvChatMessages);
        etChatMessage = findViewById(R.id.etChatMessage);
        btnChatSend = findViewById(R.id.btnChatSend);

        tvChatTitle.setText("think of something");
        Toast.makeText(getApplicationContext(), "Joined as " + username, Toast.LENGTH_SHORT).show();

        msgAdapter = new ChatMessageRecyclerViewAdapter(this, username);
        LinearLayoutManager layoutManager = new LinearLayoutManager(this);
        layoutManager.setOrientation(LinearLayoutManager.VERTICAL);
        rvChatMessages.setLayoutManager(layoutManager);
        rvChatMessages.setAdapter(msgAdapter);
    }

    private void subscribeToWebsocket() {
        compositeDisposable.add(StompUtils.lifecycle(stompClient));

        Disposable dispTopic = stompClient.topic(Const.TOPIC_PUBLIC)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(topicMessage -> {
                    Log.d(Const.TAG, "Received " + topicMessage.getPayload());
                    msgAdapter.addMessage(gson.fromJson(topicMessage.getPayload(), ChatMessage.class));
                    rvChatMessages.scrollToPosition(msgAdapter.getItemCount() - 1);
                });
        compositeDisposable.add(dispTopic);
        stompClient.connect();

        sendJoinMessage();
    }

    private void sendJoinMessage() {
        ChatMessage chatMessage = new ChatMessage();
        chatMessage.setType(ChatMessage.MessageType.JOIN);
        chatMessage.setSender(username);

        stompClient.send(new StompMessage(
                StompCommand.SEND,
                Arrays.asList(
                        new StompHeader(StompHeader.DESTINATION, Const.WS_SEND_MESSAGE_ENDPOINT),
                        new StompHeader("authorization", "this is a token generated by your code!")
                ),
                gson.toJson(chatMessage))
        ).subscribe();
    }

    private void appendNewMessage(ChatMessage chatMessage) {
        String textToAppend = null;

        // KU TWOJEJ PAMIECI NIE WYWALAM TEGO
        // Panie, co pan tu z if-ami wjechau, switchujemy enumy bo przeciez to az oko boli jak sie
        // na tako ifologie paczy
        switch (chatMessage.getType()) {
            case CHAT:
                textToAppend = chatMessage.getSender() + " : " + chatMessage.getContent();
                break;
            case JOIN:
                textToAppend = chatMessage.getSender() + " joined channel";
                break;
            case LEAVE:
                textToAppend = chatMessage.getSender() + " left channel";
                break;
        }
    }

    private void printChatMessagesHistory() {
        List<ChatMessage> chatMessages = new ArrayList<>();

        //Android doesn't allow for rest api calls on main thread
        Thread thread = new Thread(() -> {
            Request request = new Request.Builder()
                    .url(Const.REST_ADDRESS + Const.GET_MESSAGE_HISTORY_ENDPOINT)
                    .build();

            try (Response response = okHttpClient.newCall(request).execute()) {
                Type type = new TypeToken<List<ChatMessage>>() {
                }.getType();
                chatMessages.addAll(gson.fromJson(response.body().string(), type));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        chatMessages.forEach(msgAdapter::addMessage);
        rvChatMessages.scrollToPosition(msgAdapter.getItemCount() - 1);
    }

    private void sendMessage() {
        String message = etChatMessage.getText().toString();
        if (TextUtils.isEmpty(message)) {
            return;
        }

        ChatMessage chatMessage = new ChatMessage();
        chatMessage.setType(ChatMessage.MessageType.CHAT);
        chatMessage.setSender(username);
        chatMessage.setContent(message);
        stompClient.send(Const.WS_SEND_MESSAGE_ENDPOINT, gson.toJson(chatMessage)).subscribe();
        etChatMessage.setText("");
    }

    private void resetSubscriptions() {
        if (compositeDisposable != null) {
            compositeDisposable.dispose();
        }
        compositeDisposable = new CompositeDisposable();
    }

    @Override
    protected void onDestroy() {
        stompClient.disconnect();
        if (compositeDisposable != null)
            compositeDisposable.dispose();
        super.onDestroy();
    }
}

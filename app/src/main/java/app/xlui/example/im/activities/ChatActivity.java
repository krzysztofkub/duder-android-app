package app.xlui.example.im.activities;

import android.os.Build;
import android.os.Bundle;
import android.support.annotation.RequiresApi;
import android.support.v7.app.AppCompatActivity;
import android.text.TextUtils;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ScrollView;
import android.widget.TextView;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;


import org.json.JSONArray;
import org.json.JSONException;

import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import app.xlui.example.im.R;
import app.xlui.example.im.util.Const;
import app.xlui.example.im.model.ChatMessage;
import app.xlui.example.im.util.StompUtils;
import app.xlui.example.im.websocket.WebsocketConnector;
import io.reactivex.android.schedulers.AndroidSchedulers;
import io.reactivex.disposables.CompositeDisposable;
import io.reactivex.disposables.Disposable;
import io.reactivex.schedulers.Schedulers;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.Response;
import ua.naiksoftware.stomp.StompClient;
import ua.naiksoftware.stomp.dto.StompCommand;
import ua.naiksoftware.stomp.dto.StompHeader;
import ua.naiksoftware.stomp.dto.StompMessage;

public class ChatActivity extends AppCompatActivity {
    private String username;
    private EditText mMessage;
    private TextView mTextView;
    private ScrollView mScrollView;
    private Button mSend;
    private StompClient stompClient;
    private OkHttpClient okHttpClient = new OkHttpClient();
    private Gson gson = new GsonBuilder().create();
    private CompositeDisposable compositeDisposable;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_chat);

        initialize(this.getIntent().getExtras());
        stompClient = WebsocketConnector.getWebsocketConnection(this);
        resetSubscriptions();
        printChatMessagesHistory();
        subscribeToWebsocket();
        mSend.setOnClickListener(v -> sendMessage());
    }

    private void initialize(Bundle bundle) {
        username = (String) bundle.get("username");
        mTextView = findViewById(R.id.show);
        mScrollView = findViewById(R.id.scrollView);
        mMessage = findViewById(R.id.messageInput);
        mSend = findViewById(R.id.send);
    }

    private void subscribeToWebsocket() {
        compositeDisposable.add(StompUtils.lifecycle(stompClient));

        Disposable dispTopic = stompClient.topic(Const.TOPIC_PUBLIC)
                .subscribeOn(Schedulers.io())
                .observeOn(AndroidSchedulers.mainThread())
                .subscribe(topicMessage -> {
                    Log.d(Const.TAG, "Received " + topicMessage.getPayload());
                    appendNewMessage(gson.fromJson(topicMessage.getPayload(), ChatMessage.class));

                });
        compositeDisposable.add(dispTopic);
        stompClient.connect();

        sendJoinMessage();
    }

    private void sendJoinMessage() {
        ChatMessage chatMessage = new ChatMessage();
        chatMessage.setType(ChatMessage.MessageType.JOIN);
        chatMessage.setSender(username);

        stompClient.send(new StompMessage(
                StompCommand.SEND,
                Arrays.asList(
                        new StompHeader(StompHeader.DESTINATION, Const.WS_SEND_MESSAGE_ENDPOINT),
                        new StompHeader("authorization", "this is a token generated by your code!")
                ),
                gson.toJson(chatMessage))
        ).subscribe();
    }

    private void appendNewMessage(ChatMessage chatMessage) {
        String textToAppend = null;
        if (chatMessage.getType() == ChatMessage.MessageType.CHAT) {
            textToAppend = chatMessage.getSender() + " : " + chatMessage.getContent();
        } else if (chatMessage.getType() == ChatMessage.MessageType.JOIN) {
            textToAppend = chatMessage.getSender() + " joined channel";
        } else if (chatMessage.getType() == ChatMessage.MessageType.LEAVE) {
            textToAppend = chatMessage.getSender() + " left channel";
        }

        if (textToAppend != null) {
            textToAppend = textToAppend + " \n";
            mTextView.append(textToAppend);
            mScrollView.fullScroll(ScrollView.FOCUS_DOWN);
        }
    }

    private void printChatMessagesHistory() {
        List<ChatMessage> chatMessages = new ArrayList<>();
        //Android doesn't allow for rest api calls on main thread
        Thread thread = new Thread(() -> {
            Request request = new Request.Builder()
                    .url(Const.REST_ADDRESS + Const.GET_MESSAGE_HISTORY_ENDPOINT)
                    .build();

            try (Response response = okHttpClient.newCall(request).execute()) {
                Type type = new TypeToken<List<ChatMessage>>() {
                }.getType();
                chatMessages.addAll(gson.fromJson(response.body().string(), type));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        thread.start();
        try {
            thread.join();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        chatMessages.forEach(this::appendNewMessage);
    }

    private void sendMessage() {
        String message = mMessage.getText().toString();
        if (TextUtils.isEmpty(message)) {
            return;
        }

        ChatMessage chatMessage = new ChatMessage();
        chatMessage.setType(ChatMessage.MessageType.CHAT);
        chatMessage.setSender(username);
        chatMessage.setContent(message);
        stompClient.send(Const.WS_SEND_MESSAGE_ENDPOINT, gson.toJson(chatMessage)).subscribe();
        mMessage.setText("");
    }

    private void resetSubscriptions() {
        if (compositeDisposable != null) {
            compositeDisposable.dispose();
        }
        compositeDisposable = new CompositeDisposable();
    }

    @Override
    protected void onDestroy() {
        stompClient.disconnect();
        if (compositeDisposable != null) compositeDisposable.dispose();
        super.onDestroy();
    }
}

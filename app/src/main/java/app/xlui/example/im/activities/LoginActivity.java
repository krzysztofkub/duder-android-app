package app.xlui.example.im.activities;

import android.os.Bundle;
import android.support.v7.app.AppCompatActivity;
import android.util.Log;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;

import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.util.Arrays;

import app.xlui.example.im.R;
import app.xlui.example.im.conf.Const;
import app.xlui.example.im.model.ChatMessage;
import app.xlui.example.im.websocket.WebsocketConnector;
import ua.naiksoftware.stomp.StompClient;
import ua.naiksoftware.stomp.dto.StompCommand;
import ua.naiksoftware.stomp.dto.StompHeader;
import ua.naiksoftware.stomp.dto.StompMessage;

@SuppressWarnings({"FieldCanBeLocal", "ResultOfMethodCallIgnored", "CheckResult"})
public class BroadcastActivity extends AppCompatActivity {
    private EditText nameText;
    private Button sendButton;
    private TextView resultText;

    private void init() {
        nameText = findViewById(R.id.name);
        sendButton = findViewById(R.id.login);
        resultText = findViewById(R.id.show);
    }

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_broadcast);

        this.init();

        sendButton.setOnClickListener(v -> {
            StompClient stompClient = WebsocketConnector.getWebsocketConnection(this);
            stompClient.topic(Const.TOPIC_PUBLIC).subscribe(stompMessage -> {
                Log.i(Const.TAG, "Receive: " + stompMessage.getPayload());
                runOnUiThread(() -> {
                    resultText.append(stompMessage.getPayload());
                });
            });
            ObjectMapper mapper = new ObjectMapper();
            ChatMessage chatMessage = new ChatMessage();
            chatMessage.setType(ChatMessage.MessageType.JOIN);
            chatMessage.setSender(nameText.getText().toString());
            String jsonObject = "";
            try {
                jsonObject = mapper.writeValueAsString(chatMessage);
            } catch (IOException e) {
                e.printStackTrace();
            }

            stompClient.send(new StompMessage(
                    // Stomp command
                    StompCommand.SEND,
                    // Stomp Headers, Send Headers with STOMP
                    // the first header is required, and the other can be customized by ourselves
                    Arrays.asList(
                            new StompHeader(StompHeader.DESTINATION, Const.WS_SEND_MESSAGE_ENDPOINT),
                            new StompHeader("authorization", "this is a token generated by your code!")
                    ),
                    jsonObject)
            ).subscribe();
            nameText.setText("");
        });
    }
}
